// <auto-generated />
using System;
using DevBudy.PERSISTANCE.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevBudy.PERSISTANCE.Migrations
{
    [DbContext(typeof(DevBudyContext))]
    partial class DevBudyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "63f69bbe-8cb6-4457-b7f9-f5bba8a64fbf",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4256),
                            DataStatus = 1,
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 2,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "6541323b-40f3-4574-a788-5f5b7513937d",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4355),
                            DataStatus = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "a9ff38e6-823f-4d75-b0f4-33dac43ce1ec",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4359),
                            DataStatus = 1,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalDataConsentGiven")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogout")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "9acd1851-2eed-4a97-8b0a-2ef85de93659",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4526),
                            DataStatus = 1,
                            Email = "ekrmdsgnr@gmail.com",
                            EmailConfirmed = true,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "EKRMDSGNR@GMAIL.COM",
                            NormalizedUserName = "EKREM.GUNGOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEBFKd7Sm3CGyjRp1bG9/VbjSjCl20dmUDcE3QUcgLzbQNl5OanZq0jqtPNjbZB+ceQ==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2fb67b78-e067-4be0-a8f8-54b8830937d5",
                            TwoFactorEnabled = false,
                            UserName = "ekrem.Gungor"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "e86b3a1b-3623-46e5-aa22-96b5abaeb1e8",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 333, DateTimeKind.Local).AddTicks(2611),
                            DataStatus = 1,
                            Email = "canberk.gunduz@example.com",
                            EmailConfirmed = true,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "CANBERK.GUNDUZ@EXAMPLE.COM",
                            NormalizedUserName = "CANBERK.GUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEM+oI9yjb8i7CiC79FMEVepJIuX6TXX0uvHgcDNPTCbqjvLGkyhUeDlDqGEE6obzHg==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f1a18475-f1b4-4ac6-9167-7eeae574d151",
                            TwoFactorEnabled = false,
                            UserName = "canberk.Gunduz"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "3211f2cc-73f0-4dac-a2b2-cc2ae5969a25",
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 398, DateTimeKind.Local).AddTicks(7266),
                            DataStatus = 1,
                            Email = "gunguzsenemm@gmail.com",
                            EmailConfirmed = true,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "GUNGUZSENEMM@GMAIL.COM",
                            NormalizedUserName = "SENEM.GUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEO2Tu+/TmLyDs7XLPxdxw7IuhyDyYFNBkrNsghnbOBu9Q9lvju/WWYpj3CeaA2wBzA==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0ce3b0ec-415b-4dc9-88f3-e42007fea6f1",
                            TwoFactorEnabled = false,
                            UserName = "senem.Gunduz"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AppUserProfiles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4499),
                            DataStatus = 1,
                            FirstName = "Ekrem",
                            LastName = "Güngör"
                        },
                        new
                        {
                            ID = 2,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4501),
                            DataStatus = 1,
                            FirstName = "Canberk",
                            LastName = "Gündüz"
                        },
                        new
                        {
                            ID = 3,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 269, DateTimeKind.Local).AddTicks(4502),
                            DataStatus = 1,
                            FirstName = "Senem",
                            LastName = "Gündüz"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 462, DateTimeKind.Local).AddTicks(7572),
                            DataStatus = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 462, DateTimeKind.Local).AddTicks(7604),
                            DataStatus = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 19, 0, 16, 47, 462, DateTimeKind.Local).AddTicks(7606),
                            DataStatus = 1
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.ChatMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("MetaData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SenderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SenderID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserRole", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.ChatMessage", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUser", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
