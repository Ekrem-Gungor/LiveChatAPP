// <auto-generated />
using System;
using DevBudy.PERSISTANCE.ContextClasses;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevBudy.PERSISTANCE.Migrations
{
    [DbContext(typeof(DevBudyContext))]
    [Migration("20250729173522_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.18")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "9b7ffe22-088d-420c-93c9-d327f7872720",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5318),
                            DataStatus = 1,
                            Name = "Developer",
                            NormalizedName = "DEVELOPER"
                        },
                        new
                        {
                            Id = 2,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "9412b3be-7d59-473b-aae6-3e58d691173d",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5402),
                            DataStatus = 1,
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = 3,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "fd48ade4-e620-4dc5-ac14-6fa3dc2c3fdd",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5406),
                            DataStatus = 1,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<Guid?>("ActivationCode")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOnline")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalDataConsentGiven")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastActivityTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastLogout")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "41a1e67f-52ce-40ed-a0d8-c4e81c1e896d",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5606),
                            DataStatus = 1,
                            Email = "ekrmdsgnr@gmail.com",
                            EmailConfirmed = true,
                            IsOnline = false,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "EKRMDSGNR@GMAIL.COM",
                            NormalizedUserName = "EKREM.GUNGOR",
                            PasswordHash = "AQAAAAIAAYagAAAAEMGZ3zr5q9SHjXUFDdS6ir9KwJoic7XXouLVLUq+2hommGaNHr/y/JMWFzWrKX9Clw==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "47db6d0a-8ec9-4fc0-93a2-43083ab99bfd",
                            TwoFactorEnabled = false,
                            UserName = "ekrem.Gungor"
                        },
                        new
                        {
                            Id = 2,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "fb2802e1-6b3b-4c94-8c12-299ec4dfbcba",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 340, DateTimeKind.Local).AddTicks(8462),
                            DataStatus = 1,
                            Email = "canberk.gunduz@example.com",
                            EmailConfirmed = true,
                            IsOnline = false,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "CANBERK.GUNDUZ@EXAMPLE.COM",
                            NormalizedUserName = "CANBERK.GUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEBONjfQwpXs5+cGhetlaf7TTzq/GumcXzsCvA9zhxo1i4DxL67MGZ/8UgNyH7slnZQ==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e6814cd5-cc4a-456b-bb9f-b7ec16d3abf8",
                            TwoFactorEnabled = false,
                            UserName = "canberk.Gunduz"
                        },
                        new
                        {
                            Id = 3,
                            AccessFailedCount = 0,
                            ActiveStatus = 1,
                            ConcurrencyStamp = "bc6534d7-ec74-4a10-b232-e573afe272e3",
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 405, DateTimeKind.Local).AddTicks(1029),
                            DataStatus = 1,
                            Email = "gunguzsenemm@gmail.com",
                            EmailConfirmed = true,
                            IsOnline = false,
                            IsPersonalDataConsentGiven = false,
                            LastActivityTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogin = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LastLogout = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            LockoutEnabled = false,
                            NormalizedEmail = "GUNGUZSENEMM@GMAIL.COM",
                            NormalizedUserName = "SENEM.GUNDUZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEDIpy90QwPcrMjX1PPNJD7fUNZ4J2e1dDdTOrWnqff6WdqVqwnEltHV6+NR6npjPaw==",
                            PhoneNumber = "12345678910",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "7790ee16-2af0-4a10-9800-9752e8887dee",
                            TwoFactorEnabled = false,
                            UserName = "senem.Gunduz"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("AppUserProfiles");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5578),
                            DataStatus = 1,
                            FirstName = "Ekrem",
                            LastName = "Güngör"
                        },
                        new
                        {
                            ID = 2,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5580),
                            DataStatus = 1,
                            FirstName = "Canberk",
                            LastName = "Gündüz"
                        },
                        new
                        {
                            ID = 3,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 276, DateTimeKind.Local).AddTicks(5581),
                            DataStatus = 1,
                            FirstName = "Senem",
                            LastName = "Gündüz"
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 470, DateTimeKind.Local).AddTicks(4265),
                            DataStatus = 1
                        },
                        new
                        {
                            UserId = 2,
                            RoleId = 2,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 470, DateTimeKind.Local).AddTicks(4282),
                            DataStatus = 1
                        },
                        new
                        {
                            UserId = 3,
                            RoleId = 3,
                            ActiveStatus = 1,
                            CreatedDate = new DateTime(2025, 7, 29, 20, 35, 21, 470, DateTimeKind.Local).AddTicks(4283),
                            DataStatus = 1
                        });
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.ChatMessage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("ActiveStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("MessageType")
                        .HasColumnType("int");

                    b.Property<string>("MetaData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SenderID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("SenderID");

                    b.ToTable("ChatMessages");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "AppUser")
                        .WithOne("Profile")
                        .HasForeignKey("DevBudy.DOMAIN.Entities.Concretes.AppUserProfile", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUserRole", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.ChatMessage", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", "Sender")
                        .WithMany("ChatMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("DevBudy.DOMAIN.Entities.Concretes.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("DevBudy.DOMAIN.Entities.Concretes.AppUser", b =>
                {
                    b.Navigation("ChatMessages");

                    b.Navigation("Profile")
                        .IsRequired();

                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
